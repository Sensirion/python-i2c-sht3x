#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2023 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 0.33.0
# Product:       sht3x
# Model-Version: 1.0.0
#

import pytest
from sensirion_i2c_sht3x.device import Sht3xDevice

from sensirion_i2c_sht3x.commands import (Mps, Repeatability)


@pytest.fixture
def sensor(channel_provider):
    channel_provider.i2c_frequency = 100e3
    channel_provider.supply_voltage = 3.3
    with channel_provider:
        channel = channel_provider.get_channel(slave_address=0x44,
                                               crc_parameters=(8, 0x31, 0xff, 0x0))
        yield Sht3xDevice(channel)


def test_measure_single_shot1(sensor):
    (a_temperature, a_humidity
     ) = sensor.measure_single_shot(Repeatability.MEDIUM, False)
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )


def test_measure_single_shot_high_repeatability1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.measure_single_shot_high_repeatability()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


def test_measure_single_shot_high_repeatability_clock_stretching1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.measure_single_shot_high_repeatability_clock_stretching()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


def test_measure_single_shot_medium_repeatability1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.measure_single_shot_medium_repeatability()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


def test_measure_single_shot_medium_repeatability_clock_stretching1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.measure_single_shot_medium_repeatability_clock_stretching()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


def test_measure_single_shot_low_repeatability1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.measure_single_shot_low_repeatability()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


def test_measure_single_shot_low_repeatability_clock_stretching1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.measure_single_shot_low_repeatability_clock_stretching()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


def test_enable_heater1(sensor):
    sensor.enable_heater()


def test_disable_heater1(sensor):
    sensor.disable_heater()


def test_read_status_register1(sensor):
    a_status_register = sensor.read_status_register()
    print(f"a_status_register: {a_status_register}; "
          )


def test_clear_status_register1(sensor):
    sensor.clear_status_register()


def test_stop_measurement1(sensor):
    sensor.stop_measurement()


def test_soft_reset1(sensor):
    sensor.soft_reset()


def test_start_periodic_measurement1(sensor):
    sensor.start_periodic_measurement(Repeatability.MEDIUM, Mps.ONE_PER_SECOND)
    (temperature_ticks, humidity_ticks
     ) = sensor.read_measurement()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )
    (a_temperature, a_humidity
     ) = sensor.blocking_read_measurement()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )
    sensor.stop_measurement()


def test_start_art_measurement1(sensor):
    sensor.start_art_measurement()
    (temperature_ticks, humidity_ticks
     ) = sensor.read_measurement()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )
    (a_temperature, a_humidity
     ) = sensor.blocking_read_measurement()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )
    sensor.stop_measurement()


def test_start_measurement_0_5_mps_high_repeatability1(sensor):
    sensor.start_measurement_0_5_mps_high_repeatability()
    (temperature_ticks, humidity_ticks
     ) = sensor.read_measurement()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )
    (a_temperature, a_humidity
     ) = sensor.blocking_read_measurement()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )
    sensor.stop_measurement()


def test_start_measurement_0_5_mps_medium_repeatability1(sensor):
    sensor.start_measurement_0_5_mps_medium_repeatability()
    (temperature_ticks, humidity_ticks
     ) = sensor.read_measurement()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )
    (a_temperature, a_humidity
     ) = sensor.blocking_read_measurement()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )
    sensor.stop_measurement()


def test_start_measurement_0_5_mps_low_repeatability1(sensor):
    sensor.start_measurement_0_5_mps_low_repeatability()
    (temperature_ticks, humidity_ticks
     ) = sensor.read_measurement()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )
    (a_temperature, a_humidity
     ) = sensor.blocking_read_measurement()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )
    sensor.stop_measurement()


def test_start_measurement_1_mps_high_repeatability1(sensor):
    sensor.start_measurement_1_mps_high_repeatability()
    (temperature_ticks, humidity_ticks
     ) = sensor.read_measurement()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )
    (a_temperature, a_humidity
     ) = sensor.blocking_read_measurement()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )
    sensor.stop_measurement()


def test_start_measurement_1_mps_medium_repeatability1(sensor):
    sensor.start_measurement_1_mps_medium_repeatability()
    (temperature_ticks, humidity_ticks
     ) = sensor.read_measurement()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )
    (a_temperature, a_humidity
     ) = sensor.blocking_read_measurement()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )
    sensor.stop_measurement()


def test_start_measurement_1_mps_low_repeatability1(sensor):
    sensor.start_measurement_1_mps_low_repeatability()
    (temperature_ticks, humidity_ticks
     ) = sensor.read_measurement()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )
    (a_temperature, a_humidity
     ) = sensor.blocking_read_measurement()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )
    sensor.stop_measurement()


def test_start_measurement_2_mps_high_repeatability1(sensor):
    sensor.start_measurement_2_mps_high_repeatability()
    (temperature_ticks, humidity_ticks
     ) = sensor.read_measurement()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )
    (a_temperature, a_humidity
     ) = sensor.blocking_read_measurement()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )
    sensor.stop_measurement()


def test_start_measurement_2_mps_medium_repeatability1(sensor):
    sensor.start_measurement_2_mps_medium_repeatability()
    (temperature_ticks, humidity_ticks
     ) = sensor.read_measurement()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )
    (a_temperature, a_humidity
     ) = sensor.blocking_read_measurement()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )
    sensor.stop_measurement()


def test_start_measurement_2_mps_low_repeatability1(sensor):
    sensor.start_measurement_2_mps_low_repeatability()
    (temperature_ticks, humidity_ticks
     ) = sensor.read_measurement()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )
    (a_temperature, a_humidity
     ) = sensor.blocking_read_measurement()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )
    sensor.stop_measurement()


def test_start_measurement_4_mps_high_repeatability1(sensor):
    sensor.start_measurement_4_mps_high_repeatability()
    (temperature_ticks, humidity_ticks
     ) = sensor.read_measurement()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )
    (a_temperature, a_humidity
     ) = sensor.blocking_read_measurement()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )
    sensor.stop_measurement()


def test_start_measurement_4_mps_medium_repeatability1(sensor):
    sensor.start_measurement_4_mps_medium_repeatability()
    (temperature_ticks, humidity_ticks
     ) = sensor.read_measurement()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )
    (a_temperature, a_humidity
     ) = sensor.blocking_read_measurement()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )
    sensor.stop_measurement()


def test_start_measurement_4_mps_low_repeatability1(sensor):
    sensor.start_measurement_4_mps_low_repeatability()
    (temperature_ticks, humidity_ticks
     ) = sensor.read_measurement()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )
    (a_temperature, a_humidity
     ) = sensor.blocking_read_measurement()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )
    sensor.stop_measurement()


def test_start_measurement_10_mps_high_repeatability1(sensor):
    sensor.start_measurement_10_mps_high_repeatability()
    (temperature_ticks, humidity_ticks
     ) = sensor.read_measurement()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )
    (a_temperature, a_humidity
     ) = sensor.blocking_read_measurement()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )
    sensor.stop_measurement()


def test_start_measurement_10_mps_medium_repeatability1(sensor):
    sensor.start_measurement_10_mps_medium_repeatability()
    (temperature_ticks, humidity_ticks
     ) = sensor.read_measurement()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )
    (a_temperature, a_humidity
     ) = sensor.blocking_read_measurement()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )
    sensor.stop_measurement()


def test_start_measurement_10_mps_low_repeatability1(sensor):
    sensor.start_measurement_10_mps_low_repeatability()
    (temperature_ticks, humidity_ticks
     ) = sensor.read_measurement()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )
    (a_temperature, a_humidity
     ) = sensor.blocking_read_measurement()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )
    sensor.stop_measurement()

